---
title: Charts 2 to 3 Migration Guide
order: 9
layout: page
---

[[charts.migration]]
= Charts 2 to Charts 3 Migration Guide

[[charts.migration.introduction]]
== Introduction

Most of Vaadin Charts 3 API is compatible with Vaadin Charts 2.x. It can thus be used as a drop-in replacement for any 2.x version with some minor fixes.
The objective of this document is to make the transition from Vaadin Charts 2.x to Vaadin Charts 3.x easier.

[[charts.migration.nonmaven]]
== Note for non-Maven Users
Vaadin Charts 3 was restructured and now has a new JAR: [filename]#vaadin-charts-model-VERSION.jar#, which includes the model classes. If dependencies are managed manually the [filename]#vaadin-charts-model-VERSION.jar# can be found in [filename]#addon/lib/# folder of the ZIP file downloaded from https://vaadin.com/directory#!addon/vaadin-charts[Vaadin Directory] and needs to be added to the project.

[[charts.migration.timeline]]
== Timeline
One of the big features of Vaadin Charts 3 for Java is dropping the old [classname]#Timeline# component.
The widgeset needs to be updated because the timeline was removed. To update the widgetset, run
[literal]#mvn vaadin:update-widgetset# or delete a reference to the timeline widgetset in a
project [filename]#gwt.xml# file. Vaadin Charts 3 introduced the new timeline mode that can be used in regular charts with time-typed X axis.
You can find out more about this feature in <<charts-timeline#charts.timeline,"Timeline section">>.

[[charts.migration.abstractclass]]
== Changes in Abstract Classes

[[charts.migration.abstractclass.axis]]
=== Axis
[classname]#Axis# has three properties, [propertyname]#min#,
[propertyname]#max#, and [propertyname]#axisIndex#, common for all axes.
All other properties were moved to concrete implementations. Use concrete
implementations ([classname]#XAxis#, [classname]#YAxis#, [classname]#ZAxis#)
instead of [classname]#Axis#.

[[charts.migration.abstractclass.plotoptions]]
=== PlotOptions
Some properties in [classname]#AbstractPlotOptions# in Vaadin Charts 2.x were not
supported by all the subclasses. For example, setting [propertyname]#animation# in
[classname]#PlotOptionsPyramid# had no effect. In Vaadin Charts 3, properties
from [classname]#AbstractPlotOptions# were moved to concrete implementations,
that support the properties. In Vaadin Charts 3, instead of using
[classname]#AbstractPlotOptions#, use a specific implementation, such as [classname]#PlotOptionsArea#,
[classname]#PlotOptionsBar#, etc.

All the chart types in Vaadin Charts 3 are divided into several groups with
common properties. These groups are presented as abstract classes, that allow to use polymorphism for setting common
properties for specific implementations. For example, to set the same [propertyname]#lineWidth# for
[classname]#PlotOptionsLine# and [classname]#PlotOptionsSpline# use [classname]#PointOptions#.
[source, java]
----
private void setCommonProperties(PointOptions options) {
    options.setLineWidth(5);
    options.setColor(SolidColor.RED);
    options.setAnimation(false);
}
...
PlotOptionsSpline plotOptions=new PlotOptionsSpline();
PlotOptionsLine plotOptions2=new PlotOptionsLine();
setCommonProperties(plotOptions);
setCommonProperties(plotOptions2);
series.setPlotOptions(plotOptions);
series2.setPlotOptions(plotOptions2);
----
This is the list of abstract classes with their specific implementations:

* [classname]#AreaOptions# -> [classname]#PlotOptionsArea#, [classname]#PlotOptionsArearange#,
[classname]#PlotOptionsAreaspline#, [classname]#PlotOptionsAreasplinerange#
* [classname]#ColumnOptions# -> [classname]#PlotOptionsBar#, [classname]#PlotOptionsColumn#,
[classname]#PlotOptionsColumnrange#
* [classname]#GaugeOptions# -> [classname]#PlotOptionsGauge#, [classname]#PlotOptionsSolidgauge#
* [classname]#PointOptions# -> [classname]#PlotOptionsLine#, [classname]#PlotOptionsSpline#,
[classname]#PlotOptionsScatter#
* [classname]#PyramidOptions# -> [classname]#PlotOptionsPyramid#, [classname]#PlotOptionsFunnel#
* [classname]#OhlcOptions# -> [classname]#PlotOptionsOhlc#, [classname]#PlotOptionsCandlestick#

In other words, to set common properties for [classname]#PlotOptionsBar# and [classname]#PlotOptionsColumn# you
can use [classname]#ColumnOptions#, for [classname]#PlotOptionsArea# and [classname]#PlotOptionsArearange# you can use
[classname]#AreaOptions#, and so on.


[[charts.migration.classnamedif]]
== Changes in Class Names

[[charts.migration.classnamedif.plotoptions]]
=== PlotOptions

Apart from the new plot options for the new chart types ([classname]#PlotOptionsCandlestick#, [classname]#PlotOptionsFlags#,
and [classname]#PlotOptionsOhlc#), there has been the following changes in the names of the existing plot options:

* [classname]#PlotOptionsAreaRange# -> [classname]#PlotOptionsArearange#
* [classname]#PlotOptionsAreaSpline# -> [classname]#PlotOptionsAreaspline#
* [classname]#PlotOptionsAreaSplineRange# -> [classname]#PlotOptionsAreasplinerange#
* [classname]#PlotOptionsColumnRange# -> [classname]#PlotOptionsColumnrange#
* [classname]#PlotOptionsHeatMap# -> [classname]#PlotOptionsHeatmap#
* [classname]#PlotOptionsSolidGauge# -> [classname]#PlotOptionsSolidgauge#
* [classname]#PlotOptionsTreeMap# -> [classname]#PlotOptionsTreemap#

[[charts.migration.classnamedif.labels]]
=== Labels

The [classname]#Labels# class was used in:

* [classname]#PlotOptions# as data labels
* [classname]#XAxis# and [classname]#YAxis# as labels
* [classname]#DataSeriesItem# as data labels
* [classname]#TreeMapLevel# as data labels

Given that not all [classname]#Labels# properties were useful in all the places where it was used, the class was split and the following classes have been created:

* [classname]#DataLabelsFunnel# used in [classname]#PlotOptionsFunnel# and [classname]#PlotOptionsPyramid#
* [classname]#DataLabelsRange# used in [classname]#PlotOptionsArearange#, [classname]#PlotOptionsAreasplinerange# and [classname]#PlotOptionsColumnrange#
* [classname]#DataLabels# used in the rest of plot options implementations
* [classname]#Labels# used in [classname]#XAxis# and [classname]#YAxis#
* [classname]#Label# used in [classname]#Crosshair#, [classname]#PlotBand# and [classname]#Plotline#

[[charts.migration.classnamedif.tooltips]]
=== Tooltips
[classname]#Tooltip# was split into two classes: [classname]#Tooltip#
and [classname]#SeriesTooltip#. The [classname]#Tooltip# class contains all the properties to configure tooltips in a chart.
These properties are used in every series in the chart. The [classname]#SeriesTooltip# class is a subset of tooltip properties
which can only be defined on the series level. For example, [propertyname]#useHTML# can only be defined on the chart level.
[classname]#Tooltip# should be used in the chart configuration object.
[classname]#SeriesTooltip# should be used in plot options implementations:
[classname]#PlotOptionsArea#, [classname]#PlotOptionsBar#, etc.

[[charts.migration.classnamedif.other]]
=== Other

* [classname]#MarkerStates# -> [classname]#States#
* [classname]#State# -> [classname]#Hover# and [classname]#Select#
* [classname]#CrosshairStyle# -> [classname]#Crosshair#
* [classname]#TreeMapLevel# -> [classname]#Level#
* [classname]#CreditPosition# -> [classname]#Position#
* [classname]#FramePanel# -> [classname]#Back#, [classname]#Bottom#, and [classname]#Side#

[[charts.migration.methodnamedif]]
== Changes in Method Names

[[charts.migration.methodnamedif.align]]
=== Align Properties

The [propertyname]#align# property accepts values defined in the [classname]#HorizontalAlign# enum in all cases with the exception of [classname]#AxisTitle#.
In the [classname]#AxisTitle# class, the [propertyname]#align# property accepts values defined in the [classname]#VerticalAlign# enum.

[[charts.migration.classnamedif.color]]
=== Color Properties
Setters of color properties now accept a [classname]#SolidColor# or
[classname]#GradientColor# parameter. A setter that accepts a
[classname]#String# parameter was removed. Instead of it use a
[classname]#SolidColor# constructor.
[source, java]
----
plotOptions.setFillColor(new SolidColor("#ff0000"));
----

[[charts.migration.methodnamedif.crosshair]]
=== Crosshair
The crosshair definitions have been moved to the axis object for a better separation from the tooltip.
The [methodname]#setCrosshairs(CrosshairStyle)# method in [classname]#Tooltip# class is now
[methodname]#setCrosshair(Crosshair)# method in [classname]#XAxis# and [classname]#YAxis# classes.

[[charts.migration.methodnamedif.plotoptions]]
=== Plot Options

The API to configure plot options in [classname]#Configuration# class has changed.

Renamed methods:

* [methodname]#setPlotOptions()# -> [methodname]#addPlotOptions()#
* [methodname]#getAllPlotOptions()# -> [methodname]#getPlotOptions()#

New methods:

* [methodname]#setPlotOptions(AbstractPlotOptions ...)#
* [methodname]#getPlotOptions(ChartType)#

The previous [methodname]#setPlotOptions()# method added new plot options to existing ones but the new method will reset the plot options.

[[charts.migration.methodnamedif.size]]
=== Size related properties

In order to follow Vaadin Framework standards, properties related to size ([propertyname]#size#,
[propertyname]#innerRadius#, [propertyname]#outerRadius#, [propertyname]#thickness#,
[propertyname]#whiskerLength#, and so forth) now have two different setters.
One of the setters has a single [classname]#String# parameter.
The other setter has a float and a [classname]#Unit# enum parameter. The [methodname]#setSizeAsPercentage()#
method was removed.

As shown in the following example, a percentage width can be defined using both setters

[source, java]
----
PlotOptionsPyramid options = new PlotOptionsPyramid();

// Old setter
// options.setWidthAsPercentage(70);

// Using float and Unit
options.setWidth(70, Unit.PERCENTAGE);

// Using String setter
options.setWidth("70%");
----
* In [classname]#Pane#, [methodName]#setCenterXY(String, String)# is now [methodname]#setCenter(String, String)#.
The method [methodName]#setCenterXY(Number, Number)# was removed.
* In [classname]#PlotOptionsFunnel#, [classname]#PlotOptionsPie#, and [classname]#PlotOptionsPyramid#,
the method [methodname]#setCenter(Number, Number)# was removed. Use [methodname]#setCenter(Number, Number)# instead.

[[charts.migration.methodnamedif.other]]
=== Other
* In [classname]#PlotOptionsLine#, [methodname]#setStepType()# is now [methodname]#setStep()#.
* In [classname]#XAxis#, [methodname]#setShowLastTickLabel()# is now [methodname]#setShowLastLabel()#.
* In [classname]#YAxis#, [methodname]#setMinorTickInterval(Number)# was removed, use
[methodname]#setMinorTickInterval(String)# instead. The [methodname]#setMinTickInterval()# method
was added. Be aware of mixing up these two methods. The [propertyname]#minorTickInterval# property specifies
the interval between minor ticks, while [propertyname]#minTickInterval# specifies the minimum tick interval allowed
in axis values.
* In [classname]#YAxis#, [classname]#Stop# is not an inner class anymore.



[[charts.migration.example]]
== Example

[[charts.migration.example.charts2]]
=== Original Charts 2 configuration

[source, java]
----
private Chart getChart() {
    Chart chart = new Chart();

    Configuration config = chart.getConfiguration();
    config.setTitle("Charts migration");
    config.getTitle().setHorizontalAlign(HorizontalAlign.LEFT);

    config.getTooltip().setCrosshairs(
    new CrosshairStyle(10, SolidColor.BLACK, DashStyle.SOLID, 0),
    new CrosshairStyle(5, "#880000", DashStyle.DOT, 1));

    config.getLegend().setEnabled(false);
    config.getTooltip().setEnabled(false);

    ListSeries ls = new ListSeries();
    ls.setName("Data");
    ls.setData(29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4,
            194.1, 95.6, 54.4);
    ls.setPlotOptions(new PlotOptionsAreaSpline());
    ls.getPlotOptions().setColor(SolidColor.BURLYWOOD);
    ls.getPlotOptions().setDataLabels(new Labels(false));
    config.setSeries(ls);
    return chart;
}
----

[[charts.migration.example.changes]]
=== Changes needed
Horizontal alignment of the title should now be set using the [methodname]#setAlign()# method.

[classname]#CrosshairStyle# is now [classname]#Crosshair# and one instance should be set in both [classname]#XAxis# and [classname]#YAxis#.

[classname]#PlotOptionsAreaSpline# is now [classname]#PlotOptionsAreaspline#.

[classname]#DataLabels# should be used in the [methodname]#setDataLabels()# method instead of the [classname]#Labels# class.

[[charts.migration.example.result]]
=== Resulting Charts 3 Configuration

[source, java]
----
private Chart getChart() {
    Chart chart = new Chart();

    Configuration config = chart.getConfiguration();
    config.setTitle("Charts migration");
    config.getTitle().setAlign(HorizontalAlign.LEFT);

    Crosshair xCrossHair = new Crosshair();
    xCrossHair.setColor(SolidColor.BLACK);
    xCrossHair.setDashStyle(DashStyle.SOLID);
    xCrossHair.setWidth(10);
    xCrossHair.setZIndex(0);
    config.getxAxis().setCrosshair(xCrossHair);

    Crosshair yCrossHair = new Crosshair();
    yCrossHair.setColor(new SolidColor("#880000"));
    yCrossHair.setDashStyle(DashStyle.DOT);
    yCrossHair.setWidth(5);
    yCrossHair.setZIndex(1);
    config.getyAxis().setCrosshair(yCrossHair);

    config.getLegend().setEnabled(false);
    config.getTooltip().setEnabled(false);

    ListSeries ls = new ListSeries();
    ls.setName("Data");
    ls.setData(29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4,
            194.1, 95.6, 54.4);
    PlotOptionsAreaspline plotOptions = new PlotOptionsAreaspline();
    plotOptions.setColor(SolidColor.BURLYWOOD);
    plotOptions.setDataLabels(new DataLabels(false));
    ls.setPlotOptions(plotOptions);
    config.setSeries(ls);

    return chart;
}
----
